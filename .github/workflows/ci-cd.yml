#
# Description:
#   This GitHub Actions workflow provides comprehensive CI/CD for the pcg.alpaca_operator Ansible Collection.
#
#   The workflow consists of three main jobs:
#
#   1. TEST: Matrix testing across Python and Ansible version combinations
#      - Builds the Ansible collection using ansible-galaxy
#      - Installs the collection and runs sanity tests with ansible-test
#      - Classifies results as tested, failed, or unsupported
#      - Uploads individual test results as artifacts
#
#   2. SUMMARIZE: Aggregates test results and updates documentation
#      - Downloads all test artifacts and combines results
#      - Generates a comprehensive support matrix
#      - Updates README.md with the latest compatibility matrix
#      - Commits and pushes documentation updates
#
#   3. RELEASE: Automated release management
#      - Creates GitHub releases for both main branch (stable) and feature branches (development)
#      - Handles version tagging based on galaxy.yml version
#      - Uploads collection artifacts to GitHub Packages
#      - Supports release overwriting for development builds
#
#   Triggers: Push/PR (excluding .md files), weekly scheduled runs on Sundays at 2:00 AM UTC
#
name: CI/CD Pipeline

on:
  push:
    paths-ignore:
      - '*.md'
  pull_request:
    paths-ignore:
      - '*.md'
  schedule:
    # Run every Sunday at 2:00 AM UTC (weekly)
    - cron: '0 2 * * 0'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # Remember to update sanity ignore files in /tests/sanity/ if you add a new version pares to the test matrix!
          - ansible-version: "2.12"
            python-version: "3.8"
          - ansible-version: "2.12"
            python-version: "3.9"
          - ansible-version: "2.13"
            python-version: "3.8"
          - ansible-version: "2.13"
            python-version: "3.9"
          - ansible-version: "2.13"
            python-version: "3.10"
          - ansible-version: "2.14"
            python-version: "3.9"
          - ansible-version: "2.14"
            python-version: "3.10"
          - ansible-version: "2.14"
            python-version: "3.11"
          - ansible-version: "2.15"
            python-version: "3.9"
          - ansible-version: "2.15"
            python-version: "3.10"
          - ansible-version: "2.15"
            python-version: "3.11"
          - ansible-version: "2.16"
            python-version: "3.10"
          - ansible-version: "2.16"
            python-version: "3.11"
          - ansible-version: "2.16"
            python-version: "3.12"
          - ansible-version: "2.17"
            python-version: "3.10"
          - ansible-version: "2.17"
            python-version: "3.11"
          - ansible-version: "2.17"
            python-version: "3.12"
          - ansible-version: "2.18"
            python-version: "3.11"
          - ansible-version: "2.18"
            python-version: "3.12"
          - ansible-version: "2.18"
            python-version: "3.13"

    name: Test ${{ matrix.python-version }} / Ansible ${{ matrix.ansible-version }}
    env:
      HOME: /home/runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Ansible sanity dependencies
        run: |
          sudo apt update
          sudo apt install -y shellcheck
          python -m pip install --upgrade pip setuptools wheel

      - name: Install Ansible Core ${{ matrix.ansible-version }}
        run: |
          pip install "ansible-core==${{ matrix.ansible-version }}.*" || echo "unsupported" > unsupported.flag

      - name: Install test requirements
        run: |
          pip install -r requirements.txt || true
          pip install yamllint flake8

      - name: Build Ansible Collection
        run: |
          ansible-galaxy collection build

      - name: List built archive
        run: ls -lh *.tar.gz

      - name: Install Ansible Collection
        run: |
          ansible-galaxy collection install pcg-alpaca_operator-*.tar.gz --force --collections-path ~/.ansible/collections

      - name: Run ansible-test (sanity only)
        working-directory: ${{ env.HOME }}/.ansible/collections/ansible_collections/pcg/alpaca_operator
        run: |
          ansible-test sanity --python ${{ matrix.python-version }} --color --docker || echo "failed" > failed.flag


      - name: Write result
        if: always()
        run: |
          STATUS="failed"
          if [ -f ~/.ansible/collections/ansible_collections/pcg/alpaca_operator/failed.flag ]; then
            STATUS="failed"
          elif [ -f ~/.ansible/collections/ansible_collections/pcg/alpaca_operator/unsupported.flag ]; then
            STATUS="unsupported"
          else
            STATUS="tested"
          fi
          echo "${{ matrix.python-version }};${{ matrix.ansible-version }};${STATUS}" >> results.csv
        shell: bash

      - name: Upload test result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: result-${{ matrix.python-version }}-${{ matrix.ansible-version }}
          path: results.csv

      - name: Fail if Ansible sanity failed
        if: always()
        run: |
          if [ -f ~/.ansible/collections/ansible_collections/pcg/alpaca_operator/failed.flag ]; then
            echo "::error file=ansible-test::Sanity tests failed"
            exit 1
          elif [ -f ~/.ansible/collections/ansible_collections/pcg/alpaca_operator/unsupported.flag ]; then
            echo "::error file=ansible-test::Sanity tests failed"
            exit 1
          fi

  summarize:
    if: always()
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: results

      - name: Combine CSVs
        run: |
          cat results/**/*.csv > combined.csv

      - name: Install Python dependencies
        run: pip install pandas

      - name: Generate support matrix
        run: |
          python3 .github/scripts/generate-support-matrix.py combined.csv > support_matrix.md

      - name: Upload support matrix
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: support-matrix
          path: support_matrix.md

      - name: Update README.md with latest support matrix
        run: |
          python3 .github/scripts/update-readme.py

      - name: Commit updated README.md
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add README.md
          git commit -m "Update support matrix [ci skip]" || echo "No changes to commit"
          git push

  release:
    if: needs.summarize.result == 'success'
    runs-on: ubuntu-latest
    needs: [test, summarize]
    permissions:
      contents: write
      packages: write
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt || true
          pip install PyYAML

      - name: Build Ansible Collection
        run: |
          ansible-galaxy collection build

      - name: Get version and branch info
        id: version
        run: |
          VERSION=$(python -c "import yaml; print(yaml.safe_load(open('galaxy.yml'))['version'])")
          BRANCH_NAME=${GITHUB_REF#refs/heads/}

          if [ "$BRANCH_NAME" = "main" ]; then
            TAG="v$VERSION"
            RELEASE_TITLE="Release $TAG"
            RELEASE_NOTES="Ansible Collection Release for pcg.alpaca_operator version $VERSION"
          else
            # Sanitize branch name for use in tag (replace special chars with hyphens)
            SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g')
            TAG="dev-$SANITIZED_BRANCH-v$VERSION"
            RELEASE_TITLE="Development Release $TAG"
            RELEASE_NOTES="Development release of pcg.alpaca_operator version $VERSION from branch $BRANCH_NAME"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "release_title=$RELEASE_TITLE" >> $GITHUB_OUTPUT
          echo "release_notes=$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Check if release already exists
        id: check_release
        run: |
          if gh release view ${{ steps.version.outputs.tag }} 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Delete existing release if it exists
        if: steps.check_release.outputs.exists == 'true'
        run: |
          echo "Release ${{ steps.version.outputs.tag }} already exists, deleting it to overwrite"
          gh release delete ${{ steps.version.outputs.tag }} --yes

      - name: Create or Recreate Release
        run: |
          gh release create ${{ steps.version.outputs.tag }} \
            --title "${{ steps.version.outputs.release_title }}" \
            --notes "${{ steps.version.outputs.release_notes }}" \
            pcg-alpaca_operator-${{ steps.version.outputs.version }}.tar.gz

      - name: Upload collection to GitHub Packages
        run: |
          gh release upload ${{ steps.version.outputs.tag }} pcg-alpaca_operator-${{ steps.version.outputs.version }}.tar.gz --clobber