#
# Description:
#   This GitHub Actions workflow publishes the Ansible Collection to Ansible Galaxy
#   after a successful CI/CD pipeline run and release creation.
#
#   The workflow:
#   1. Waits for the CI/CD pipeline to complete successfully
#   2. Only runs for releases on the main branch (stable releases)
#   3. Downloads the collection artifact from the GitHub release
#   4. Publishes the collection to Ansible Galaxy using ansible-galaxy CLI
#
#   Triggers: After successful completion of CI/CD pipeline on main branch
#
name: Publish to Ansible Galaxy

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types: [completed]
    branches: [main]

jobs:
  publish-to-galaxy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install ansible-core PyYAML

      - name: Get latest release info
        id: release
        run: |
          # Get the latest release tag
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT

          # Extract version from tag (remove 'v' prefix if present)
          VERSION=${LATEST_TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          echo "Latest release: $LATEST_TAG (version: $VERSION)"

      - name: Download collection artifact from release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Download the collection artifact from the GitHub release
          gh release download ${{ steps.release.outputs.tag }} --pattern "pcg-alpaca_operator-*.tar.gz"

          # Verify the artifact was downloaded
          ls -la pcg-alpaca_operator-*.tar.gz

      - name: Publish to Ansible Galaxy
        env:
          GALAXY_API_KEY: ${{ secrets.GALAXY_API_KEY }}
        run: |
          # Publish the collection to Ansible Galaxy
          ansible-galaxy collection publish pcg-alpaca_operator-${{ steps.release.outputs.version }}.tar.gz

          echo "Successfully published pcg.alpaca_operator version ${{ steps.release.outputs.version }} to Ansible Galaxy"

      - name: Verify publication
        run: |
          # Wait a moment for Galaxy to process the upload
          sleep 10

          # Try to install the collection from Galaxy to verify it was published
          ansible-galaxy collection install pcg.alpaca_operator --force

          echo "Collection successfully verified on Ansible Galaxy"
