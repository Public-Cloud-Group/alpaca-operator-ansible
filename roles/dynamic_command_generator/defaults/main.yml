---
# Dynamic Command Generator Role Defaults

# CSV File Configuration
csv_processor:
  # Input CSV file path (local file)
  input_file: "{{ role_path }}/files/swm_prod.csv"
  
  # CSV delimiter
  delimiter: ";"
  
  # CSV encoding
  encoding: "utf-8"
  
  # Whether to skip header row
  skip_header: true

# CSV Column Mapping
csv_columns:
  primary_system: 0
  hdb_nw_sid: 1
  hdb_tenant: 2
  system_type: 3
  system_staging: 4
  system_sla: 5
  system_vm_type: 6
  system_vm_flavor: 7
  system_vdns: 8
  system_az: 9
  hdb_data_min: 10
  hdb_data_max: 11
  hdb_log_min: 12
  hdb_log_max: 13
  hdb_shared_min: 14
  hdb_shared_max: 15
  Instance_no: 16

# Output Configuration
output_config:
  # Output directory for generated files (local)
  output_dir: "{{ playbook_dir }}/generated_commands"
  
  # File naming patterns
  command_file_pattern: "command_{{ item.system_name | replace(' ', '_') | lower }}_{{ item.system_type | lower }}.yml"
  consolidated_file: "consolidated_commands.yml"
  inventory_file: "inventory.ini"
  variables_file: "variables.yml"
  readme_file: "README.md"

# Template Configuration
template_config:
  # Template directory
  template_dir: "{{ role_path }}/templates"
  
  # Template files
  command_template: "command_template.yml.j2"
  consolidated_template: "consolidated_template.yml.j2"
  inventory_template: "inventory_template.ini.j2"
  variables_template: "variables_template.yml.j2"
  readme_template: "README_template.md.j2"

# Processing Options
processing_options:
  # Whether to generate individual command files
  generate_individual_files: true
  
  # Whether to generate consolidated file
  generate_consolidated_file: true
  
  # Whether to generate inventory file
  generate_inventory: true
  
  # Whether to generate variables file
  generate_variables: true
  
  # Whether to generate README
  generate_readme: true
  
  # Whether to validate CSV data before processing
  validate_data: true
  
  # Log level for processing
  log_level: "info"

# SLA-based Command Configuration
sla_commands:
  SLA1:
    commands:
      - name: "BKP: DB log sync"
        processId: 801
        parameters: "-p GLTarch -s <BKP_LOG_SRC> -l 4 -d <BKP_LOG_DEST1> -r <BKP_LOG_DEST2> -b <BKP_LOG_CLEANUP_INT> -t <BKP_LOG_CLEANUP_INT2> -h DB_HOST"
        schedule:
          period: "every_5min"
          time: "00:00:00"
          cronExpression: ""
          daysOfWeek: ["monday", "tuesday", "wednesday", "thursday", "friday"]
        parametersNeeded: false
        disabled: false
        critical: true
        autoDeploy: false
        history:
          documentAllRuns: true
          retention: 200
        timeout:
          type: "default"
          value: 30
        escalation:
          mailEnabled: true
          smsEnabled: false
          mailAddress: "monitoring@pcg.io"
          smsAddress: ""
          minFailureCount: 1
          triggers:
            everyChange: true
            toRed: true
            toYellow: false
            toGreen: false
      - name: "BKP: DB data sync"
        processId: 802
        parameters: "-p GLTarch -s <BKP_DATA_SRC> -l 4 -d <BKP_DATA_DEST1> -r <BKP_DATA_DEST2> -b <BKP_DATA_CLEANUP_INT> -t <BKP_DATA_CLEANUP_INT2> -h DB_HOST"
        schedule:
          period: "fixed_time"
          time: "02:00:00"
          cronExpression: ""
          daysOfWeek: ["saturday"]
        parametersNeeded: false
        disabled: false
        critical: true
        autoDeploy: false
        history:
          documentAllRuns: true
          retention: 200
        timeout:
          type: "custom"
          value: 120
        escalation:
          mailEnabled: true
          smsEnabled: true
          mailAddress: "monitoring@pcg.io"
          smsAddress: "0123456789"
          minFailureCount: 1
          triggers:
            everyChange: true
            toRed: true
            toYellow: true
            toGreen: false

  SLA2:
    commands:
      - name: "BKP: DB log sync"
        processId: 801
        parameters: "-p GLTarch -s <BKP_LOG_SRC> -l 3 -d <BKP_LOG_DEST1> -r <BKP_LOG_DEST2> -b <BKP_LOG_CLEANUP_INT> -t <BKP_LOG_CLEANUP_INT2> -h DB_HOST"
        schedule:
          period: "every_15min"
          time: "00:00:00"
          cronExpression: ""
          daysOfWeek: ["monday", "tuesday", "wednesday", "thursday", "friday"]
        parametersNeeded: false
        disabled: false
        critical: false
        autoDeploy: false
        history:
          documentAllRuns: false
          retention: 100
        timeout:
          type: "default"
          value: 30
        escalation:
          mailEnabled: true
          smsEnabled: false
          mailAddress: "monitoring@pcg.io"
          smsAddress: ""
          minFailureCount: 3
          triggers:
            everyChange: false
            toRed: true
            toYellow: false
            toGreen: false

  SLA3:
    commands:
      - name: "BKP: DB log sync"
        processId: 801
        parameters: "-p GLTarch -s <BKP_LOG_SRC> -l 2 -d <BKP_LOG_DEST1> -r <BKP_LOG_DEST2> -b <BKP_LOG_CLEANUP_INT> -t <BKP_LOG_CLEANUP_INT2> -h DB_HOST"
        schedule:
          period: "every_30min"
          time: "00:00:00"
          cronExpression: ""
          daysOfWeek: ["monday", "tuesday", "wednesday", "thursday", "friday"]
        parametersNeeded: false
        disabled: false
        critical: false
        autoDeploy: false
        history:
          documentAllRuns: false
          retention: 50
        timeout:
          type: "default"
          value: 30
        escalation:
          mailEnabled: false
          smsEnabled: false
          mailAddress: ""
          smsAddress: ""
          minFailureCount: 5
          triggers:
            everyChange: false
            toRed: false
            toYellow: false
            toGreen: false

  SLA4:
    commands:
      - name: "BKP: DB log sync"
        processId: 801
        parameters: "-p GLTarch -s <BKP_LOG_SRC> -l 1 -d <BKP_LOG_DEST1> -r <BKP_LOG_DEST2> -b <BKP_LOG_CLEANUP_INT> -t <BKP_LOG_CLEANUP_INT2> -h DB_HOST"
        schedule:
          period: "manually"
          time: "00:00:00"
          cronExpression: ""
          daysOfWeek: []
        parametersNeeded: false
        disabled: true
        critical: false
        autoDeploy: false
        history:
          documentAllRuns: false
          retention: 25
        timeout:
          type: "default"
          value: 30
        escalation:
          mailEnabled: false
          smsEnabled: false
          mailAddress: ""
          smsAddress: ""
          minFailureCount: 10
          triggers:
            everyChange: false
            toRed: false
            toYellow: false
            toGreen: false

# ALPACA API Configuration (will be built dynamically in tasks)
# Required variables that must be set by the user:
# - ALPACA_Operator_API_Protocol (optional, defaults to 'https')
# - ALPACA_Operator_API_Port (optional, defaults to 8443)
# - ALPACA_Operator_API_Username (required)
# - ALPACA_Operator_API_Password (required)
# - ALPACA_Operator_API_Validate_Certs (optional, defaults to false) 