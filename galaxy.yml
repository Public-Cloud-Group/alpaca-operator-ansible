### REQUIRED
# The namespace of the collection. This can be a company/brand/organization or product namespace under which all
# content lives. May only contain alphanumeric lowercase characters and underscores. Namespaces cannot start with
# underscores or numbers and cannot contain consecutive underscores
namespace: pcg

# The name of the collection. Has the same character restrictions as 'namespace'
name: alpaca_operator

# The version of the collection. Must be compatible with semantic versioning
version: 1.0.1

# The path to the Markdown (.md) readme file. This path is relative to the root of the collection
readme: README.md

# A list of the collection's content authors. Can be just the name or in the format 'Full Name <email> (url)
# @nicks:irc/im.site#channel'
authors:
- Public Cloud Group GmbH (pcg.io)

### OPTIONAL but strongly recommended
# A short summary description of the collection
description: >
  This collection contains Ansible modules for managing the ALPACA Operator,
  developed by Public Cloud Group GmbH (pcg.io).

# The path to the license file for the collection. This path is relative to the root of the collection. This key is
# mutually exclusive with 'license'
license_file: LICENSE

# A list of tags you want to associate with the collection for indexing/searching. A tag name has the same character
# requirements as 'namespace' and 'name'
tags: [ "automation", "cloud", "monitoring", "sap" ]

# Collections that this collection requires to be installed for it to be usable. The key of the dict is the
# collection label 'namespace.name'. The value is a version range
# L(specifiers,https://python-semanticversion.readthedocs.io/en/latest/#requirement-specification). Multiple version
# range specifiers can be set and are separated by ','
dependencies: {}

# The URL of the originating SCM repository
repository: https://github.com/pcg-sap/alpaca-operator-ansible

# The URL to any online docs
documentation: https://docs.ansible.com/ansible/latest/collections/pcg/alpaca_operator

# The URL to the homepage of the collection/project
homepage: https://github.com/pcg-sap/alpaca-operator-ansible

# The URL to the collection issue tracker
issues: https://github.com/pcg-sap/alpaca-operator-ansible/issues

# A list of file glob-like patterns used to filter any files or directories that should not be included in the build
# artifact. A pattern is matched from the relative path of the file or directory of the collection directory. This
# uses 'fnmatch' to match the files or directories. Some directories and files like 'galaxy.yml', '*.pyc', '*.retry',
# and '.git' are always filtered. Mutually exclusive with 'manifest'
build_ignore:
  # Development and temporary files
  - ".dev"
  - ".dev/*"
  - ".tmp"
  - ".tmp/*"
  - ".DS_Store"
  - "*.DS_Store"

  # CI/CD and GitHub specific
  - ".github"
  - ".github/*"

  # Build artifacts and distribution
  - "build"
  - "build/*"
  - "dist"
  - "dist/*"
  - "*.egg-info"
  - "*.egg-info/*"

  # Python cache and virtual environments
  - "__pycache__"
  - "__pycache__/*"
  - "*.pyc"
  - "*.pyo"
  - "*.pyd"
  - ".venv"
  - ".venv/*"
  - "venv"
  - "venv/*"
  - "env"
  - "env/*"

  # IDE and editor files
  - ".vscode"
  - ".vscode/*"
  - ".idea"
  - ".idea/*"
  - "*.code-workspace"

  # Test coverage and cache
  - ".coverage"
  - ".cache"
  - ".cache/*"
  - ".tox"
  - ".tox/*"
  - ".pytest_cache"
  - ".pytest_cache/*"
  - "htmlcov"
  - "htmlcov/*"
  - "coverage.xml"
  - "nosetests.xml"

  # Logs and temporary files
  - "*.log"
  - "*.pid"
  - "*.sock"
  - "*.db"
  - "pip-log.txt"
  - "pip-delete-this-directory.txt"

  # Environment and secrets
  - ".env"
  - ".env.*"

  # Documentation and notes (if not needed in production)
  - "notes.md"
  - "*.notes.md"

# A dict controlling use of manifest directives used in building the collection artifact. The key 'directives' is a
# list of MANIFEST.in style
# L(directives,https://packaging.python.org/en/latest/guides/using-manifest-in/#manifest-in-commands). The key
# 'omit_default_directives' is a boolean that controls whether the default directives are used. Mutually exclusive
# with 'build_ignore'
# manifest: null
